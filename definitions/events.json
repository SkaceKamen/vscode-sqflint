{"load":{"id":"load","title":"Load","description":"Use on: Display, Control\nFired on: Fires when UI container is created, but no action is taken. onLoad event for display fires after onLoad events for all controls it contains are fired.\nReturns: Returns the display or control in format Array.","args":"* _displayOrControl\n* _config\n","type":"ui"},"unload":{"id":"unload","title":"Unload","description":"Use on: Display\nFired on: Display is closed, but no controls are destroyed yet.\nReturns: Returns the display and exit code.","args":"* _display\n* _exitCode\n","type":"ui"},"childdestroyed":{"id":"childdestroyed","title":"ChildDestroyed","description":"Use on: Display\nFired on: Child display is closed.\nReturns: Returns the display, which child display was closed and exit code.","args":"* _display\n* _closedChildDisplay\n* _exitCode\n","type":"ui"},"mouseenter":{"id":"mouseenter","title":"MouseEnter","description":"Use on: Control\nFired on: The mouse pointer enters the control area.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"mouseexit":{"id":"mouseexit","title":"MouseExit","description":"Use on: Control\nFired on: The mouse pointer exits the control area.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"setfocus":{"id":"setfocus","title":"SetFocus","description":"Use on: Control\nFired on: Input focus is on control. It now begins to accept keyboard input.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"killfocus":{"id":"killfocus","title":"KillFocus","description":"Use on: Control\nFired on: Input focus is no longer on control. It no longer accepts keyboard input.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"timer":{"id":"timer","title":"Timer","description":"Use on: Control\nFired on: N/A.\nReturns: N/A.","args":"* _displayorcontrol\n* _key\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"keydown":{"id":"keydown","title":"KeyDown","description":"Use on: Display, Control\nFired on: Pressing any keyboard key. Fired before the onKeyUp event.\nReturns: Returns the display or control, the keyboard code and the state of Shift, Ctrl and Alt.","args":"* _displayorcontrol\n* _key\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"keyup":{"id":"keyup","title":"KeyUp","description":"Use on: Display, Control\nFired on: Releasing any keyboard key. Fired after the onKeyDown event.\nReturns: Returns the display or control, the keyboard code and the state of Shift, Ctrl and Alt.","args":"* _displayorcontrol\n* _key\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"char":{"id":"char","title":"Char","description":"Use on: Display, Control\nFired on: When some readable characters is recognised.\nReturns: Returns the display or control and the char code.","args":"* _displayorcontrol\n* _charCode\n","type":"ui"},"imechar":{"id":"imechar","title":"IMEChar","description":"Use on: Control\nFired on: When IME character is recognized (used in Korean and other eastern languages).\nReturns: Returns the control and the char code.","args":"* _control\n* _charCode\n","type":"ui"},"imecomposition":{"id":"imecomposition","title":"IMEComposition","description":"Use on: Control\nFired on: When partial IME character is recognized (used in Korean and other eastern languages).\nReturns: Returns the control and the char code.","args":"* _control\n* _charCode\n","type":"ui"},"mousebuttondown":{"id":"mousebuttondown","title":"MouseButtonDown","description":"Use on: Display, Control\nFired on: Pressing a mouse button. Followed by the onMouseButtonUp event.\nReturns: Returns the display or control, the pressed button, the x and y coordinates and the state of Shift, Ctrl and Alt.","args":"* _displayorcontrol\n* _button\n* _xPos\n* _yPos\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"mousebuttonup":{"id":"mousebuttonup","title":"MouseButtonUp","description":"Use on: Display, Control\nFired on: Releasing a mouse button. Follows the onMouseButtonDown event.\nReturns: Returns the display or control, the pressed button, the x and y coordinates and the state of Shift, Ctrl and Alt.","args":"* _displayorcontrol\n* _button\n* _xPos\n* _yPos\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"mousebuttonclick":{"id":"mousebuttonclick","title":"MouseButtonClick","description":"Use on: ListBox, ComboBox, TextBox, Button, ActiveText\nFired on: Pressing and releasing a mouse button.\nReturns: Returns the control, the pressed button, the x and y coordinates and the state of Shift, Ctrl and Alt.","args":"* _control\n* _button\n* _xPos\n* _yPos\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"mousebuttondblclick":{"id":"mousebuttondblclick","title":"MouseButtonDblClick","description":"Use on: Control\nFired on: Pressing and releasing a mouse button twice within very short time.\nReturns: Returns the control, the pressed button, the x and y coordinates and the state of Shift, Ctrl and Alt.","args":"* _control\n* _button\n* _xPos\n* _yPos\n* _shift\n* _ctrl\n* _alt\n","type":"ui"},"mousemoving":{"id":"mousemoving","title":"MouseMoving","description":"Fired on: Fires continuously while moving the mouse with a certain interval.","args":"* _control\n* _xPos\n* _yPos\n* _mouseOver\n","type":"ui"},"mouseholding":{"id":"mouseholding","title":"MouseHolding","description":"Fired on: Fires continuously while mouse is not moving with a certain interval.","args":"* _control\n* _xPos\n* _yPos\n* _mouseOver\n","type":"ui"},"mousezchanged":{"id":"mousezchanged","title":"MouseZChanged","description":"Use on: Display, Control\nFired on: Fires when mouse wheel position is changed. Does not fire on disabled control.\nReturns: Returns the display or control and the change of the scrollwheel.","args":"* _displayorcontrol\n* _scroll\n","type":"ui"},"candestroy":{"id":"candestroy","title":"CanDestroy","description":"Use on: Control\nFired on: Ask this control if dialog can be closed (used for validation of contained data).\nReturns: Returns the control and exit code.","args":"* _control\n* _exitCode\n","type":"ui"},"destroy":{"id":"destroy","title":"Destroy","description":"Use on: Control\nFired on: Destroying control\nReturns: Returns the control and exit code.","args":"* _control\n* _exitCode\n","type":"ui"},"buttonclick":{"id":"buttonclick","title":"ButtonClick","description":"Use on: Button\nFired on: The attached button action is performed. When returned value is true, button's display remains opened.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"buttondblclick":{"id":"buttondblclick","title":"ButtonDblClick","description":"Use on: Button\nFired on: Button double clicked.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"buttondown":{"id":"buttondown","title":"ButtonDown","description":"Use on: Button\nFired on: The left mouse button is pressed over the button area or a key on the keyboard is pressed.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"buttonup":{"id":"buttonup","title":"ButtonUp","description":"Use on: Button\nFired on: The left mouse button is released outside the button area and the attached button action is not performed.\nReturns: Returns control.","args":"* _control\n","type":"ui"},"lbselchanged":{"id":"lbselchanged","title":"LBSelChanged","description":"Use on: Listbox, Combobox\nFired on: The selection in a listbox is changed. The left mouse button has been released and the new selection is fully made.\nReturns: Returns the control and the selected element index.","args":"* _control\n* _selectedIndex\n","type":"ui"},"lblistselchanged":{"id":"lblistselchanged","title":"LBListSelChanged","description":"Use on: Listbox\nFired on: Selection in XCombo box changed (but value is not stored yet).\nReturns: Returns the control and the selected element index.","args":"* _control\n* _selectedIndex\n","type":"ui"},"lbdblclick":{"id":"lbdblclick","title":"LBDblClick","description":"Use on: Listbox\nFired on: Double click on some row in listbox.\nReturns: Returns the control and the selected element index.","args":"* _control\n* _selectedIndex\n","type":"ui"},"lbdrag":{"id":"lbdrag","title":"LBDrag","description":"Use on: Listbox\nFired on: Drag & drop operation started.\nReturns: Returns the control and an array of arrays of information on the dragged item/s (if listbox is of style LB_MULTI then multiple items can be dragged and dropped at the same time).Control must have unique IDC and canDrag parameter enabled in its class in order to work.","args":"* _control\n* _listboxInfo\n* _lbText\n* _lbValue\n* _lbData\n","type":"ui"},"lbdragging":{"id":"lbdragging","title":"LBDragging","description":"Use on: Listbox\nFired on: Drag & drop operation is in progress.\nReturns: Returns the control, the x and y coordinates in screen space, listbox idc where item/s were dragged from and an array of arrays of information on the dragged item/s (if listbox is of style LB_MULTI then multiple items can be dragged and dropped at the same time).","args":"* _control\n* _xPos\n* _yPos\n* _listboxIDC\n* _listboxInfo\n* _lbText\n* _lbValue\n* _lbData\n","type":"ui"},"lbdrop":{"id":"lbdrop","title":"LBDrop","description":"Use on: Listbox, Combobox, Textbox, ActiveText, Button, ControlsGroup\nFired on: Drag & drop operation finished.\nReturns: Returns the control, the x and y coordinates in screen space, listbox idc where item/s were dragged from and an array of arrays of information on the dropped item/s (if listbox is of style LB_MULTI then multiple items can be dragged and dropped at the same time).When the Listbox is inside a CT_CONTROLS_GROUP the eventhandler need to be added to the CT_CONTROLS_GROUP.Will not work for CT_CONTROLS_GROUP that is subordinate to another group.","args":"* _control\n* _xPos\n* _yPos\n* _listboxIDC\n* _listboxInfo\n* _lbText\n* _lbValue\n* _lbData\n","type":"ui"},"treeselchanged":{"id":"treeselchanged","title":"TreeSelChanged","description":"Use on: Tree\nFired on: Changing the selection in a tree.\nReturns: Returns the control and the new selection path.","args":"* _control\n* _selectionPath\n","type":"ui"},"treelbuttondown":{"id":"treelbuttondown","title":"TreeLButtonDown","description":"Use on: Tree\nFired on: Pressing and releasing left mouse button on a tree.\nReturns: Returns the control.","args":"* _control\n","type":"ui"},"treedblclick":{"id":"treedblclick","title":"TreeDblClick","description":"Use on: Tree\nFired on: Pressing and releasing twice on a tree entry.\nReturns: Returns the control and the current selection path.","args":"* _control\n* _selectionPath\n","type":"ui"},"treeexpanded":{"id":"treeexpanded","title":"TreeExpanded","description":"Use on: Tree\nFired on: The tree folder structure has been expanded.\nReturns: Returns the control and path.","args":"* _control\n* _selectionPath\n","type":"ui"},"treecollapsed":{"id":"treecollapsed","title":"TreeCollapsed","description":"Use on: Tree\nFired on: The tree folder structure has been collapsed.\nReturns: Returns the control and path.","args":"* _control\n* _selectionPath\n","type":"ui"},"treemousemove":{"id":"treemousemove","title":"TreeMouseMove","description":"Use on: Tree\nFired on: Fires continuously while moving the mouse with a certain interval.\nReturns: Returns the control.","args":"* _control\n","type":"ui"},"treemousehold":{"id":"treemousehold","title":"TreeMouseHold","description":"Use on: Tree\nFired on: Fires continuously while mouse is not moving with a certain interval.\nReturns: Returns the control.","args":"* _control\n","type":"ui"},"treemouseexit":{"id":"treemouseexit","title":"TreeMouseExit","description":"Use on: Tree\nFired on: The mouse pointer exits the tree control area\nReturns: Returns the control.","args":"* _control\n","type":"ui"},"checked":{"id":"checked","title":"Checked","description":"Use on: Checkbox (CT_CHECKBOX type 77 of Arma: GUI Configuration).\nFired on: N/A\nReturns: N/A","args":"* _control\n* _checked\n","type":"ui"},"checkedchanged":{"id":"checkedchanged","title":"CheckedChanged","description":"Use on: Checkbox (CT_CHECKBOX type 77 of Arma: GUI Configuration).\nFired on: Checked state of CheckBox changed.\nReturns: Returns control and the checked state (0 or 1, not boolean).","args":"* _control\n* _checked\n","type":"ui"},"checkboxesselchanged":{"id":"checkboxesselchanged","title":"CheckBoxesSelChanged","description":"Use on: Checkboxes (CT_CHECKBOXES type 7 of Arma: GUI Configuration)\nFired on: Changed the selection of checkboxes.\nReturns: Returns the control, the selected element index and the current state.","args":"* _control\n* _selectedIndex\n* _currentState\n","type":"ui"},"toolboxselchanged":{"id":"toolboxselchanged","title":"ToolBoxSelChanged","description":"Use on: Toolbox\nFired on: Changed the selection in a toolbox.\nReturns: Returns the control and the selected element index.","args":"* _control\n* _selectedIndex\n","type":"ui"},"htmllink":{"id":"htmllink","title":"HTMLLink","description":"Use on: HTML\nFired on: Pressing and releasing a HTML link.\nReturns: Returns the control and href.","args":"* _control\n* _url\n","type":"ui"},"sliderposchanged":{"id":"sliderposchanged","title":"SliderPosChanged","description":"Use on: Slider\nFired on: Changing the position of a slider.\nReturns: Returns the control and the change.","args":"* _control\n* _newValue\n","type":"ui"},"objectmoved":{"id":"objectmoved","title":"ObjectMoved","description":"Use on: Object\nFired on: Moving an object.\nReturns: Returns the control and the offset on the x, y and z axes.","args":"* _control\n* _offset\n","type":"ui"},"menuselected":{"id":"menuselected","title":"MenuSelected","description":"Use on: Context menu\nFired on: Some item in context menu (used now only in new mission editor) was selected.\nReturns: Returns the control and the command id.","args":"* _control\n* _commandId\n","type":"ui"},"draw":{"id":"draw","title":"Draw","description":"Use on: Map\nFired on: Fires when the map is drawn (can occur more than once per second).\nReturns: Returns the map control.","args":"* _control\n","type":"ui"},"videostopped":{"id":"videostopped","title":"VideoStopped","description":"Use on: Control\nFired on: Activated every time the video ends (when looped, handler is executed after every finished loop).\nReturns: Returns the control.","args":"* _control\n","type":"ui"},"animchanged":{"id":"animchanged","title":"AnimChanged","description":"Triggered every time a new animation is started. This EH is only triggered for the 1st animation state in a sequence.\nIt can be assigned to a remote unit but will only fire on the PC where the actual addEventHandler command was executed.","args":"* unit: Object - Object the event handler is assigned to\n* anim: String - Name of the anim that is started","type":"units"},"animdone":{"id":"animdone","title":"AnimDone","description":"Triggered every time an animation is finished. Triggered for all animation states in a sequence.\nIt can be assigned to a remote unit but will only fire on the PC where the actual addEventHandler command was executed.","args":"* unit: Object - Object the event handler is assigned to\n* anim: String - Name of the anim that has been finished","type":"units"},"animstatechanged":{"id":"animstatechanged","title":"AnimStateChanged","description":"Triggered every time an animation state changes. Triggered for all animation states in a sequence.\nIt can be assigned to a remote unit but will only fire on the PC where the actual addEventHandler command was executed.","args":"* unit: Object - Object the event handler is assigned to\n* anim: String - Name of the anim that has been started","type":"units"},"containerclosed":{"id":"containerclosed","title":"ContainerClosed","description":"Triggers when player finished accessing cargo container.\nThis event handler is similar to InventoryClosed EH, but needs to be assigned to the container rather than the player.\nNote: will trigger only for the unit opening container.","args":"* container: Object - Cargo container.\n* player: Object - Unit who accessed the container.","type":"units"},"containeropened":{"id":"containeropened","title":"ContainerOpened","description":"Triggers when cargo container is accessed by player.\nThis event handler is similar to InventoryOpened EH, but needs to be assigned to the container rather than the player and cannot be overridden.\nNote: will trigger only for the unit opening container.","args":"* container: Object - Cargo container.\n* player: Object - Unit who accessed the container.","type":"units"},"controlsshifted":{"id":"controlsshifted","title":"ControlsShifted","description":"Triggers when control of a vehicle is shifted (pilot->co-pilot, co-pilot->pilot), usually when user performs an action such as  TakeVehicleControl,  SuspendVehicleControl,  UnlockVehicleControl,  LockVehicleControl, or when enableCopilot command is used. This event handler will always fire on the PC where action is triggered as well as where the vehicle is local at the time. When control of the vehicle is shifted, the locality of the vehicle changes to the locality of the new controller. For example, if helicopter is local to the server and co-pilot takes controls, the helicopter changes locality to co-pilot PC.\nThis means that if \"ControlsShifted\" EH was added on both server and client, \"Take Controls\" action will trigger EH on both, client and server PC, but subsequent co-pilot \"Release Controls\" action will trigger only on co-pilot's PC, because vehicle will be local to co-pilot at this point. There is also a slightly better mission version of  ControlsShifted event handler.","args":"* vehicle: Object - Vehicle which controls were shifted.\n* activeCoPilot: Object - Co-pilot unit which controls vehicle after this event. objNull if co-pilot is not controlling the vehicle.\n* oldController: Object - Unit who controlled vehicle before this event.","type":"units"},"dammaged":{"id":"dammaged","title":"Dammaged","description":"Triggered when the unit is damaged. In ArmA works with all vehicles not only men like in OFP.\nIt can be assigned to a remote vehicle but will only fire on the PC where the actual addEventHandler command was executed.","args":"* unit: Object - Object the event handler is assigned to\n* hitSelection: String - Name of the selection where the unit was damaged\n* damage: Number - Resulting level of damage\n* 1.67 hitPartIndex: Number - hit index of the hit selection\n* 1.67 hitPoint: String - hit point Cfg name\n* 1.69 shooter: Object - shooter reference (to get instigator use getShotParents on projectile)\n* 1.69 projectile: Object - the projectile that caused damage","type":"units"},"deleted":{"id":"deleted","title":"Deleted","description":"Triggered just before the assigned entity is deleted.","args":"* entity: Object - Object the event handler is assigned to","type":"units"},"disassembled":{"id":"disassembled","title":"Disassembled","description":"Triggers when entity such as weapon/backpack gets disassembled. EH should be attached to the entity.","args":"* entity: Object - Object the event handler is assigned to\n* primaryBag: Object - First backpack object which was entity disassembled into\n* secondaryBag: Object - Second backpack object which was entity disassembled into","type":"units"},"engine":{"id":"engine","title":"Engine","description":"Triggered when the engine of the unit is turned on/off.","args":"* vehicle: Object - Vehicle the event handler is assigned to\n* engineState: Boolean - True when the engine is turned on, false when turned off","type":"units"},"epecontact":{"id":"epecontact","title":"EpeContact","description":"Triggered when object collision (PhysX) is in progress.\nIt can be assigned to a remote vehicle but will only fire on the PC where the actual addEventHandler command was executed.","args":"* object1: Object - Object with attached handler.\n* object2: Object - Object which is colliding with object1.\n* select1: String - Selection of object1 which is colliding - not in use at this moment, empty string is always returned.\n* select2: String - Selection of object2 which is colliding - not in use at this moment, empty string is always returned.\n* force: Number - Force of collision.","type":"units"},"epecontactend":{"id":"epecontactend","title":"EpeContactEnd","description":"Triggered when object collision (PhysX) ends. It can be assigned to a remote vehicle but will only fire on the PC where the actual addEventHandler command was executed.","args":"* object1: Object - Object with attached handler.\n* object2: Object - Object which is colliding with object1.\n* select1: String - Selection of object1 which is colliding - not in use at this moment, empty string is always returned.\n* select2: String - Selection of object2 which is colliding - not in use at this moment, empty string is always returned.\n* force: Number - Force of collision.","type":"units"},"epecontactstart":{"id":"epecontactstart","title":"EpeContactStart","description":"Triggered when object collision (PhysX) starts. It can be assigned to a remote vehicle but will only fire on the PC where the actual addEventHandler command was executed.","args":"* object1: Object - Object with attached handler.\n* object2: Object - Object which is colliding with object1.\n* select1: String - Selection of object1 which is colliding - not in use at this moment, empty string is always returned.\n* select2: String - Selection of object2 which is colliding - not in use at this moment, empty string is always returned.\n* force: Number - Force of collision.","type":"units"},"explosion":{"id":"explosion","title":"Explosion","description":"Triggered when a vehicle or unit is damaged by a nearby explosion.\nIt can be assigned to a remote unit or vehicle but will only fire on the PC where EH is added and explosion is local, i.e. it really needs to be added on every PC and JIP and will fire only where the explosion is originated.","args":"* vehicle: Object - Object the event handler is assigned to\n* damage: Number - Damage inflicted to the object","type":"units"},"fired":{"id":"fired","title":"Fired","description":"Triggered when the unit fires a weapon.\nThis EH will not trigger if a unit fires out of a vehicle. For those cases an EH has to be attached to that particular vehicle.\nWhen \"Manual Fire\" is used, the gunner is objNull if gunner is not present or the gunner is not the one who fires.\nTo check if \"Manual Fire\" is on, use isManualFire. The actual shot instigator could be retrieved with getShotParents command.","args":"* unit: Object - Object the event handler is assigned to\n* weapon: String - Fired weapon\n* muzzle: String - Muzzle that was used\n* mode: String - Current mode of the fired weapon\n* ammo: String - Ammo used\n* magazine: String - magazine name which was used\n* projectile: Object - Object of the projectile that was shot out\n* 1.65 gunner: Object - gunner whose weapons are firing.","type":"units"},"firedman":{"id":"firedman","title":"FiredMan","description":"Triggered when the unit fires a weapon. This EH must be attached to a soldier and unlike with \"Fired\" EH, it will fire regardless of whether the soldier is on foot or firing vehicle weapon.\nFor remoteControled unit use \"Fired\" EH instead.","args":"* unit: Object - Unit the event handler is assigned to (the instigator)\n* weapon: String - Fired weapon\n* muzzle: String - Muzzle that was used\n* mode: String - Current mode of the fired weapon\n* ammo: String - Ammo used\n* magazine: String - magazine name which was used\n* projectile: Object - Object of the projectile that was shot out\n* vehicle: Object - Vehicle, if weapon is vehicle weapon, otherwise objNull","type":"units"},"firednear":{"id":"firednear","title":"FiredNear","description":"Triggered when a weapon is fired somewhere near the unit or vehicle. It is also triggered if the unit itself is firing.\n(Exception(s): the Throw weapon wont broadcast the FiredNear event).\nWhen \"Manual Fire\" is used, the gunner is objNull if gunner is not present or the gunner is not the one who fires.\nTo check if \"Manual Fire\" is on, use isManualFire. The actual shot instigator could be retrieved with getShotParents command.\n1.30 Works with thrown weapons.","args":"* unit: Object - Object the event handler is assigned to\n* firer: Object - Object which fires a weapon near the unit\n* distance: Number - Distance in meters between the unit and firer (max. distance ~69m)\n* weapon: String - Fired weapon\n* muzzle: String - Muzzle that was used\n* mode: String - Current mode of the fired weapon\n* ammo: String - Ammo used\n* 1.65 gunner: Object - gunner, whose weapons are fired","type":"units"},"fuel":{"id":"fuel","title":"Fuel","description":"Triggered when the vehicle's fuel status changes between non-empty and empty or between empty and non-empty.","args":"* vehicle: Object - vehicle the event handler is assigned to\n* hasFuel: Boolean - false when has no fuel, true when has some fuel","type":"units"},"gear":{"id":"gear","title":"Gear","description":"Triggered when the unit lowers/retracts the landing gear, whether it is a helicopter or a plane.\nAlso triggered for helicopters in landing mode, regardless if they have retractable gear or not.","args":"* vehicle: Object - Vehicle the event handler is assigned to\n* gearState: Boolean - True when the gear is lowered, false when retracted","type":"units"},"getin":{"id":"getin","title":"GetIn","description":"Triggers when a unit enters a vehicle. It can be assigned to a remote vehicle but will only fire on the PC where the actual addEventHandler command was executed. This EH is triggered by moveInXXXX commands and \"GetInXXXX\" actions, but not upon a seat change within the same vehicle.","args":"* vehicle: Object - Vehicle the event handler is assigned to\n* role: String - Can be either \"driver\", \"gunner\" or \"cargo\"\n* unit: Object - Unit that entered the vehicle\n* 1.36 turret: Array - turret path","type":"units"},"getinman":{"id":"getinman","title":"GetInMan","description":"Triggers when a unit enters a vehicle. Similar to \"GetIn\" but must be assigned to a unit and not vehicle.\nPersistent on respawn if assigned where unit was local. This EH is triggered by moveInXXXX commands and \"GetInXXXX\" actions.","args":"* unit: Object - Unit the event handler is assigned to\n* role: String - Can be either \"driver\", \"gunner\" or \"cargo\"\n* vehicle: Object - Vehicle the unit entered\n* turret: Array - turret path","type":"units"},"getout":{"id":"getout","title":"GetOut","description":"Triggers when a unit gets out from a vehicle.\nIt can be assigned to a remote vehicle but will only fire on the PC where the actual addEventHandler command was executed.\nThis EH is triggered by moveOut, \"GetOut\" & \"Eject\" actions, if an alive crew member disconnects or is deleted, but not upon a seat change within the same vehicle.","args":"* vehicle: Object - Vehicle the event handler is assigned to\n* role: String - Can be either \"driver\", \"gunner\" or \"cargo\"\n* unit: Object - Unit that left the vehicle\n* 1.36 turret: Array - turret path","type":"units"},"getoutman":{"id":"getoutman","title":"GetOutMan","description":"Triggers when a unit exits a vehicle. Similar to \"GetOut\" but must be assigned to a unit and not vehicle.\nPersistent on respawn if assigned where unit was local. This EH is triggered by moveOut and \"GetOut\" & \"Eject\" actions.","args":"* unit: Object - unit the event handler is assigned to\n* role: String - Can be either \"driver\", \"gunner\" or \"cargo\"\n* vehicle: Object - Vehicle that the unit left\n* turret: Array - turret path","type":"units"},"handledamage":{"id":"handledamage","title":"HandleDamage","description":"Triggers when the unit is damaged and fires for each damaged selection separately \nNote: Currently, in Arma 3 v1.70 it triggers for every selection of a vehicle, no matter if the section was damaged or not). Works with all vehicles.\nThis EH can accept a remote unit as argument however it will only fire when the unit is local to the PC this event handler was added on.\nFor example, you can add this event handler to one particular vehicle on every PC.\nWhen this vehicle gets hit, only EH on PC where the vehicle is currently local will fire.","args":"* unit: Object - Object the event handler is assigned to.\n* selection: String - Name of the selection where the unit was damaged.\n\"\" for over-all structural damage\n\"?\" for unknown selections\n* \"\" for over-all structural damage\n* \"?\" for unknown selections\n* damage: Number - Resulting level of damage for the selection.\n* source: Object - The source unit that caused the damage.\n* projectile: String - Classname of the projectile that caused inflicted the damage. (\"\" for unknown, such as falling damage.)\n* 1.49 hitPartIndex: Number - Hit part index of the hit point, -1 otherwise.\n* 1.65 instigator: Object - Person who pulled the trigger\n* 1.67 hitPoint: String - hit point Cfg name","type":"units"},"handleheal":{"id":"handleheal","title":"HandleHeal","description":"Triggered when unit starts to heal (player using heal action or AI heals after being ordered).\nTriggers only on PC where EH is added and unit is local.\nIf code returns false, engine side healing follows.\nReturn true if you handle healing in script, use AISFinishHeal to tell engine that script side healing is done.\nSee also lifeState and setUnconscious commands.\nNOTE: This Event Handler is broken but somewhat usable.\nWhen attached to a unit it will fire when medic action is started (not finished!) on the unit.\n_this select 0 will be the unit itself, _this select 1 will be the healer.\nThe 3rd param will always be false and neither returning true nor using AISFinishHeal will have any effect on the engine default healing behaviour.\nIf unit walks away from the healer during healing action, the heal will not finish but there is no way to detect this within \"HandleHeal\" framework.\nThis code will fix unit to 100% health after self-use of medpack:","args":"* unit: Object\n* healer: Object\n* isMedic: Boolean - true when healer is corpsman","type":"units"},"handleidentity":{"id":"handleidentity","title":"HandleIdentity","description":"Triggered whenever an entity is created. Can be used in scripts if EH is added immediately after unit is created in unscheduled environment.\nDoesn't trigger for editor placed units. Doesn't work in Multiplayer. If EH scope returns true, the default engine identity application is overridden.\nbob = group player createUnit [typeOf player, position player, [], 0, \"none\"];\nbob addEventHandler [\"HandleIdentity\", {hint str _this}];","args":"* unit: Object - Object the event handler is assigned to\n* rating: Number - rating to be added","type":"units"},"handlerating":{"id":"handlerating","title":"HandleRating","description":"Triggered when engine adds rating to overall rating of the unit, usually after a kill or a friendly kill.\nIf EH code returns Number, this will override default engine behaviour and the resulting value added will be the one returned by EH code.","args":"* unit: Object - Object the event handler is assigned to\n* rating: Number - rating to be added","type":"units"},"handlescore":{"id":"handlescore","title":"HandleScore","description":"Triggered when engine adds score to overall score of the unit, usually after a kill.\nIf the EH code returns Nothing or true, the default engine scoreboard update (score, vehicle kills, infantry kills, etc) is applied, if it returns false, the engine update is cancelled. To add or modify score, use addScore and addScoreSide commands.\nFor remote units like players, the event does not persist after respawn, and must be re-added to the new unit. \nNOTE: MP only.","args":"* unit: Object - Object the event handler is assigned to\n* object: Object - object for which score was awarded\n* score: Number - score to be added","type":"units"},"hit":{"id":"hit","title":"Hit","description":"Triggered when the unit is hit/damaged.","args":"* unit: Object - Object the event handler is assigned to\n* source: Object - Object that caused the damage – contains unit in case of collisions\n* damage: Number - Level of damage caused by the hit\n* 1.65 instigator: Object - Person who pulled the trigger","type":"units"},"hitpart":{"id":"hitpart","title":"HitPart","description":"Runs when the object it was added to gets injured/damaged.\nIt returns the position and component that was hit on the object within a nested array, this is because the model may have more than one selection name for the hit component\n(i.e. a single piece of geometry can be simultaneously part of multiple, overlapping named selections).","args":"* target: Object - Object that got injured/damaged.\n* shooter: Object - Unit or vehicle that inflicted the damage. If injured by a vehicle impact or a fall the target itself is returned, or, in case of explosions, the null object.","type":"units"},"init":{"id":"init","title":"Init","description":"Triggered whenever an entity is created. Cannot be used in scripts, only inside class Eventhandlers in config.\ne.g:","args":"* entity: Object - Object the event handler is assigned to","type":"units"},"incomingmissile":{"id":"incomingmissile","title":"IncomingMissile","description":"Triggered when a guided missile locked on the target or unguided missile or rocket aimed by AI or Player at the target was fired.","args":"* target: Object - Object the event handler is assigned to\n* ammo: String - Ammo type that was fired on the target\n* 1.42 vehicle: Object - Vehicle that fired the weapon. In case of soldier, unit is returned\n* 1.65 instigator: Object - Person who pulled the trigger","type":"units"},"inventoryclosed":{"id":"inventoryclosed","title":"InventoryClosed","description":"Triggered when the unit closes inventory. Said unit can be non-local when adding the EH, but must be local for the EH to trigger.","args":"* unit: Object - Object the event handler is assigned to\n* targetContainer: Object - connected container or weaponholder","type":"units"},"inventoryopened":{"id":"inventoryopened","title":"InventoryOpened","description":"Triggered when unit opens inventory. Said unit can be non-local when adding the EH, but must be local for the EH to trigger. End EH main scope with true to override the opening of the inventory in case you wish to handle it yourself:","args":"* unit: Object - Object the event handler is assigned to\n* targetContainer: Object - connected container or weaponholder\n* 1.65 secondaryContainer: Object - second connected container or weaponholder or objNull","type":"units"},"killed":{"id":"killed","title":"Killed","description":"Triggered when the unit is killed.","args":"* unit: Object - Object the event handler is assigned to\n* killer: Object - Object that killed the unit. Contains the unit itself in case of collisions\n* 1.65 instigator: Object - Person who pulled the trigger\n* 1.67 useEffects: Boolean - same as useEffects in setDamage alt syntax","type":"units"},"landedtouchdown":{"id":"landedtouchdown","title":"LandedTouchDown","description":"Triggered when a plane (AI or player) touches the ground.","args":"* plane: Object - Object the event handler is assigned to\n* airportID: Number - ID of the airport (-1 for anything else)","type":"units"},"landedstopped":{"id":"landedstopped","title":"LandedStopped","description":"Triggered when an AI pilot would get out usually. Not executed for player.","args":"* plane: Object - Object the event handler is assigned to\n* airportID: Number - ID of the airport (-1 for anything else)","type":"units"},"landing":{"id":"landing","title":"Landing","description":"Triggered when an AI pilot (or auto-pilot) is preparing for landing. The exact moment of triggering coincides with lowering of the gear (\"Gear\" EH)","args":"* plane: Object - Object the event handler is assigned to\n* airportID: Number or Object - ID of the airport or aircraft carrier object\n* isCarrier: Boolean - true if landing on aircraft carrier","type":"units"},"landingcanceled":{"id":"landingcanceled","title":"LandingCanceled","description":"Triggered when AI pilot landing is cancelled (for example new order received to land elsewhere).\nThe exact moment of triggering coincides with retracting of the gear (\"Gear\" EH).\nNote: Doesn't trigger if player switches off auto-pilot. Canceled is spelled with one L","args":"* plane: Object - Object the event handler is assigned to\n* airportID: Number or Object - ID of the airport or aircraft carrier object (-1 no airport)\n* isCarrier: Boolean - true if landing on aircraft carrier","type":"units"},"local":{"id":"local","title":"Local","description":"Triggers when locality of object in MP is changed. The event handler only triggers on the computers that are directly involved in change of locality.\nSo if EH is added to every computer on network, it will only trigger on 2 computers, on the computer that receives ownership of the object (new owner), in which case _this select 1 will be true,\nand on the computer from which ownership is transferred (old owner), in which case _this select 1 will be false.","args":"* entity: Object - The object that changed locality.\n* local: Boolean - If the object is local on given computer.","type":"units"},"pathcalculated":{"id":"pathcalculated","title":"PathCalculated","description":"Triggers when calculatePath command has calculated the path.","args":"* agent: Object - The agent instance which was used to calculate the path\n* path: Array - The array of positions representing the path","type":"units"},"periscopeelevationchanged":{"id":"periscopeelevationchanged","title":"PeriscopeElevationChanged","description":"Fires every frame during periscope elevation animation.","args":"* vehicle: Object - The vehicle this EH is assigned to\n* turret: Array - The turret which periscope is changing elevation\n* elevation: Number - Current periscope elevation (changes with each simulation). See also periscopeElevation, elevatePeriscope\n* direction: Number - -1:moves down, 1:moves up, 0:stopped, when direction returns 0, this also means the event handler fired for the last time for this elevation.\n* userisblocked: Boolean - whether or not the user ability to override is blocked. See also periscopeElevation, elevatePeriscope","type":"units"},"postreset":{"id":"postreset","title":"PostReset","description":"Triggers after PP effects have been reset by the engine","args":"* unit: Object - Unit to which the event handler is assigned\n* container: Object - The container into which the item was placed (vehicle, box, etc.)\n* item: String - The class name of the moved item","type":"units"},"put":{"id":"put","title":"Put","description":"Triggers when a unit puts an item in a container.","args":"* unit: Object - Unit to which the event handler is assigned\n* container: Object - The container into which the item was placed (vehicle, box, etc.)\n* item: String - The class name of the moved item","type":"units"},"reloaded":{"id":"reloaded","title":"Reloaded","description":"Triggers when a weapon is reloaded with a new magazine. For more information see: Reloaded","args":"* unit: Object - unit or vehicle to which EH is assigned\n* weapon: String - weapon that got reloaded\n* muzzle: String - weapon's muzzle that got reloaded\n* newMagazine: Array - new magazine info\n* oldMagazine: Array or Nothing - old magazine info","type":"units"},"respawn":{"id":"respawn","title":"Respawn","description":"Triggered when a unit respawns.","args":"* unit: Object - Object the event handler is assigned to\n* corpse: Object - Object the event handler was assigned to, aka the corpse/unit player was previously controlling","type":"units"},"ropeattach":{"id":"ropeattach","title":"RopeAttach","description":"Triggered when a rope is attached to an object.\nIn the case of sling loading, this event handler must be assigned to the helicopter and will trigger for each attached rope.","args":"* object 1: Object - Object to which the event handler is assigned.\n* rope: Object - The rope being attached between object 1 and object 2.\n* object 2: Object - The object that is being attached to object 1 via rope.","type":"units"},"ropebreak":{"id":"ropebreak","title":"RopeBreak","description":"Triggered when a rope is detached from an object.\nIn the case of sling loading, this event handler must be assigned to the helicopter and will trigger for each detached rope.","args":"* object 1: Object - Object to which the event handler is assigned.\n* rope: Object - The rope being detached between object 1 and object 2.\n* object 2: Object - The object that is being detached from object 1 via rope.","type":"units"},"seatswitched":{"id":"seatswitched","title":"SeatSwitched","description":"Triggered when unit changes seat within vehicle. EH returns both units switching seats.\nIf switching seats with an empty seat, one of the returned units will be objNull.\nThe new position can be obtained with assignedVehicleRole <unit>.\nThis EH must be assigned to a vehicle.","args":"* vehicle: Object - Vehicle to which the event handler is assigned.\n* unit1: Object - Unit switching seat.\n* unit2: Object - Unit switching seat.","type":"units"},"seatswitchedman":{"id":"seatswitchedman","title":"SeatSwitchedMan","description":"Triggered when unit changes seat within vehicle. EH returns both units switching seats.\nIf switching seats with an empty seat, one of the returned units will be objNull.\nThe new position can be obtained with assignedVehicleRole <unit>. This EH must be assigned to a unit and not a vehicle.\nThis EH is persistent and will be transferred to the new unit after respawn, but only if it was assigned where unit was local.","args":"* unit1: Object - Unit switching seat.\n* unit2: Object - Unit with which unit1 is switching seat.\n* vehicle: Object - Vehicle where switching seats is taking place.","type":"units"},"soundplayed":{"id":"soundplayed","title":"SoundPlayed","description":"Triggered when player is making noises when injured or fatigued for example. The number param passed to the EH code, points to the sound origin:","args":"* unit: Object - Unit to which the event handler is assigned\n* soundID: Number - sound origin","type":"units"},"suppressed":{"id":"suppressed","title":"Suppressed","description":"Triggers when enemy projectile is passing by closer than defined suppression radius ammo value in config. Can be made to trigger for the same side if the side is set as enemy to itself: west setFriend [west, 0];","args":"* unit: Object - Unit to which the event is assigned\n* distance: Number - Distance of the projectile pass-by\n* shooter: Object - Who (or what) fired - vehicle or drone\n* instigator: Object - Who pressed the trigger. Instigator is different from the shooter when player is operator of UAV for example\n* ammoObject: Object - The ammunition itself\n* ammoClassName: String - The ammunition's classname\n* ammoConfig: Config - The ammunition's CfgAmmo config path","type":"units"},"take":{"id":"take","title":"Take","description":"Triggers when a unit takes an item from a container.","args":"* unit: Object - Unit to which the event handler is assigned\n* container: Object - The container from which the item was taken (vehicle, box, etc.)\n* item: String - The class name of the taken item","type":"units"},"tasksetascurrent":{"id":"tasksetascurrent","title":"TaskSetAsCurrent","description":"Triggers when player's current task changes","args":"* unit: Object - The player to whom the event handler is assigned\n* task: Task - The new current task","type":"units"},"turnin":{"id":"turnin","title":"TurnIn","description":"Triggers when member of crew in a vehicle uses Turn In action","args":"* vehicle: Object - The vehicle the event handler is assigned to\n* unit: Object - The unit performing the Turn In action\n* turret: Array - Turret path","type":"units"},"turnout":{"id":"turnout","title":"TurnOut","description":"Triggers when member of crew in a vehicle uses Turn Out action","args":"* vehicle: Object - The vehicle the event handler is assigned to\n* unit: Object - The unit performing the Turn Out action\n* turret: Array - Turret path","type":"units"},"weaponassembled":{"id":"weaponassembled","title":"WeaponAssembled","description":"Triggers when weapon gets assembled. EH should be attached to the unit and not the weapon.","args":"* unit: Object - Object the event handler is assigned to\n* weapon: Object - Object of the assembled weapon","type":"units"},"weapondisassembled":{"id":"weapondisassembled","title":"WeaponDisassembled","description":"Triggers when weapon gets disassembled. EH should be attached to the unit and not the weapon.\nNOTE: As of Arma 3 v1.32, this event does not fire if the weapon is not local. See http://feedback.arma3.com/view.php?id=21308","args":"* unit: Object - Object the event handler is assigned to\n* primaryBag: Object - First backpack object which was weapon disassembled into\n* secondaryBag: Object - Second backpack object which was weapon disassembled into","type":"units"},"weapondeployed":{"id":"weapondeployed","title":"WeaponDeployed","description":"Triggers when the deployed state of a weapon or bipod changes. Note: A weapon cannot be rested and deployed at the same time.","args":"* unit: Object - Object the event handler is assigned to\n* isDeployed: Boolean - true if deployed","type":"units"},"weaponrested":{"id":"weaponrested","title":"WeaponRested","description":"Triggers when weapon rested state changes (weapon near a surface that can provide weapon support).\nNote: A weapon cannot be rested and deployed at the same time.","args":"* unit: Object - Object the event handler is assigned to\n* isRested: Boolean - true if rested","type":"units"},"selectedactionperformed":{"id":"selectedactionperformed","title":"SelectedActionPerformed","description":"RTM helicopter user action event","args":"","type":"units"},"selectedactionchanged":{"id":"selectedactionchanged","title":"SelectedActionChanged","description":"RTM helicopter user action event","args":"","type":"units"},"selectedrotorlibactionperformed":{"id":"selectedrotorlibactionperformed","title":"SelectedRotorLibActionPerformed","description":"RTM helicopter user action event","args":"","type":"units"},"selectedrotorlibactionchanged":{"id":"selectedrotorlibactionchanged","title":"SelectedRotorLibActionChanged","description":"RTM helicopter user action event","args":"","type":"units"},"curatorfeedbackmessage":{"id":"curatorfeedbackmessage","title":"CuratorFeedbackMessage","description":"Triggered when curator attempts invalid action in curator interface.","args":"* curator: Object\n* errorID: Number","type":"units"},"curatorgroupdoubleclicked":{"id":"curatorgroupdoubleclicked","title":"CuratorGroupDoubleClicked","description":"Triggered when a group is double-clicked on in curator interface.","args":"* curator: Object\n* group: Group","type":"units"},"curatorgroupplaced":{"id":"curatorgroupplaced","title":"CuratorGroupPlaced","description":"Triggered when new group is placed in curator interface.","args":"* curator: Object\n* group: Group","type":"units"},"curatorgroupselectionchanged":{"id":"curatorgroupselectionchanged","title":"CuratorGroupSelectionChanged","description":"Triggered when a group is selected in curator interface.","args":"* curator: Object\n* group: Group","type":"units"},"curatormarkerdeleted":{"id":"curatormarkerdeleted","title":"CuratorMarkerDeleted","description":"Triggered when a marker is deleted in curator interface.","args":"* curator: Object\n* marker: String","type":"units"},"curatormarkerdoubleclicked":{"id":"curatormarkerdoubleclicked","title":"CuratorMarkerDoubleClicked","description":"Triggered when a marker is double-clicked on in curator interface.","args":"* curator: Object\n* marker: String","type":"units"},"curatormarkeredited":{"id":"curatormarkeredited","title":"CuratorMarkerEdited","description":"Triggered when a marker is moved in curator interface.","args":"* curator: Object\n* marker: String","type":"units"},"curatormarkerplaced":{"id":"curatormarkerplaced","title":"CuratorMarkerPlaced","description":"Triggered when new marker is placed in curator interface.","args":"* curator: Object\n* marker: String","type":"units"},"curatormarkerselectionchanged":{"id":"curatormarkerselectionchanged","title":"CuratorMarkerSelectionChanged","description":"Triggered when a marker is selected in curator interface.","args":"* curator: Object\n* marker: String","type":"units"},"curatorobjectdeleted":{"id":"curatorobjectdeleted","title":"CuratorObjectDeleted","description":"Triggered when an object is deleted in curator interface.","args":"* curator: Object\n* entity: Object","type":"units"},"curatorobjectdoubleclicked":{"id":"curatorobjectdoubleclicked","title":"CuratorObjectDoubleClicked","description":"Triggered when an object is double-clicked on in curator interface.","args":"* curator: Object\n* entity: Object","type":"units"},"curatorobjectedited":{"id":"curatorobjectedited","title":"CuratorObjectEdited","description":"Triggered when an object is moved or rotated in curator interface.","args":"* curator: Object\n* entity: Object","type":"units"},"curatorobjectplaced":{"id":"curatorobjectplaced","title":"CuratorObjectPlaced","description":"Triggered when new object is placed in curator interface.\nThis event handler will trigger individually for each unit in a placed group - excluding the crew in vehicles.","args":"* curator: Object\n* entity: Object","type":"units"},"curatorobjectregistered":{"id":"curatorobjectregistered","title":"CuratorObjectRegistered","description":"Triggered when player enters curator interface. Assign curator cost to every object in the game.\nThis is the primary method that a mission designer can use to limit the objects a curator can place.\nFull article - Curator","args":"* curator: Object\n* input: Array of Strings - all CfgVehicles classes","type":"units"},"curatorobjectselectionchanged":{"id":"curatorobjectselectionchanged","title":"CuratorObjectSelectionChanged","description":"Triggered when an object is selected in curator interface.","args":"* curator: Object\n* entity: Object","type":"units"},"curatorpinged":{"id":"curatorpinged","title":"CuratorPinged","description":"Triggered when a player pings his curator(s) by pressing Zeus key.","args":"* curator: Object\n* player: Object","type":"units"},"curatorwaypointdeleted":{"id":"curatorwaypointdeleted","title":"CuratorWaypointDeleted","description":"Triggered when a waypoint is deleted in curator interface.","args":"* curator: Object\n* waypoint: Array","type":"units"},"curatorwaypointdoubleclicked":{"id":"curatorwaypointdoubleclicked","title":"CuratorWaypointDoubleClicked","description":"Triggered when a waypoint is double-clicked on in curator interface.","args":"* curator: Object\n* waypoint: Array","type":"units"},"curatorwaypointedited":{"id":"curatorwaypointedited","title":"CuratorWaypointEdited","description":"Triggered when a waypoint is moved in curator interface.","args":"* curator: Object\n* waypoint: Array","type":"units"},"curatorwaypointplaced":{"id":"curatorwaypointplaced","title":"CuratorWaypointPlaced","description":"Triggered when new waypoint is placed in curator interface.","args":"* curator: Object\n* Group: Group\n* Waypoint Index: Number","type":"units"},"curatorwaypointselectionchanged":{"id":"curatorwaypointselectionchanged","title":"CuratorWaypointSelectionChanged","description":"Triggered when a waypoint is selected in curator interface.","args":"* curator: Object\n* waypoint: Array","type":"units"},"mphit":{"id":"mphit","title":"MPHit","description":"Triggered when the unit is hit/damaged. EH can be added on any machine and EH code will trigger globally on every connected client and server.\nThis EH is clever enough to be triggered globally only once even if added on all clients or a single client that is then disconnected, EH will still trigger globally only once.","args":"* unit: Object - Object the event handler is assigned to \n* causedBy: Object - Object that caused the damage. Contains the unit itself in case of collisions. \n* damage: Number - Level of damage caused by the hit\n* 1.65 instigator: Object - Person who pulled the trigger","type":"units"},"mpkilled":{"id":"mpkilled","title":"MPKilled","description":"Triggered when the unit is killed. EH can be added on any machine and EH code will trigger globally on every connected client and server.\nThis EH is clever enough to be triggered globally only once even if added on all clients or a single client that is then disconnected, EH will still trigger globally only once.","args":"* unit: Object - Object the event handler is assigned to\n* killer: Object - Object that killed the unitContains the unit itself in case of collisions\n* 1.65 instigator: Object - Person who pulled the trigger\n* 1.67 useEffects: Boolean - same as useEffects in setDamage alt syntax","type":"units"},"mprespawn":{"id":"mprespawn","title":"MPRespawn","description":"Triggered when a unit, it is assigned to, respawns. This EH does not work as one would expect MP EH should work like.\nIt is only triggered on one machine where the unit it was assigned to is local.\nThe only difference between Respawn and MPRespawn is that MPRespawn can be assigned from anywhere while Respawn requires the unit to be local.\nMPRespawn EH expects the EH code to return array in format of Position, which will be used to place respawned unit at desired coordinates.\nFor example: player addMPEventHandler [\"MPRespawn\", {[1234,1234,0]}]; will place player at [1234,1234,0] immediately on respawn.","args":"* unit: Object - Object the event handler is assigned to\n* corpse: Object - Object the event handler was assigned to, aka the corpse/unit player was previously controlling.","type":"units"},"musicstart":{"id":"musicstart","title":"MusicStart","description":"Triggers when CfgMusic sound starts playing, after being executed with playMusic command.","args":"* className: String - CfgMusic class name of currently playing sound.\n* handlerID: Number - EH id returned by addMusicEventHandler.","type":"units"},"musicstop":{"id":"musicstop","title":"MusicStop","description":"Triggers when CfgMusic sound finished playing, after being executed with playMusic command.\nNote that EH will not be triggered if you force stop the music with playMusic \"\".","args":"* className: String - CfgMusic class name of currently played sound.\n* handlerID: Number - EH id returned by addMusicEventHandler.","type":"units"}}